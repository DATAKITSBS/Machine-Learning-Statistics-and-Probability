# -*- coding: utf-8 -*-
"""Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LaFtyVfrG9HwhQSyYovudHzA9cOJ1-CE
"""

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

import pandas as pd
import numpy as np
import seaborn as sn
import matplotlib.pyplot as plt
import statsmodels.api as sm

customers_df = pd.read_csv("Income Data.csv")
customers_df.head(5)

sn.lmplot("age", "income", data=customers_df, fit_reg= False, size = 4)

"""# **K-Means Clustering**"""

from sklearn.cluster import KMeans
clusters = KMeans(3)
clusters.fit(customers_df)

customers_df["clusterid"] = clusters.labels_
customers_df[0:5]

markers =  ['+','^','.']
sn.lmplot("age", "income",
data = customers_df,
hue = "clusterid",
fit_reg = False,
markers = markers,
height = 4);

clusters.cluster_centers_

"""**Cluster Centers and Interpreting the Clusters**"""

customers_df.groupby('clusterid')['age',
'income'].agg(["mean",'std']).reset_index()

"""**Creating Product Segment Using Clustering**"""

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

beer_df = pd.read_csv('beer.csv')
beer_df

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_beer_df = scaler.fit_transform(beer_df[['calories',
'sodium','alcohol', 'cost']])

"""**Using Dendrogram**"""

cmap = sn.cubehelix_palette(as_cmap=True, rot=-.3,light=1)
sn.clustermap(scaled_beer_df,
cmap=cmap, linewidths=.2, figsize = (8,8));

beer_df.iloc[[10, 16]]

beer_df.iloc[[2,18]]

cluster_range = range( 1, 10 )
cluster_errors = []
for num_clusters in cluster_range:
  clusters = KMeans( num_clusters )
  clusters.fit( scaled_beer_df )
  cluster_errors.append( clusters.inertia_ )
plt.figure(figsize=(6,4))
plt.plot( cluster_range, cluster_errors, marker = "o" );

k = 3
clusters = KMeans(k, random_state = 42)
clusters.fit(scaled_beer_df)
beer_df["clusterid"]  =  clusters.labels_

beer_df[beer_df.clusterid == 0]

beer_df[beer_df.clusterid == 1]

beer_df[beer_df.clusterid == 2]

"""**Hierarchical Clustering**"""

from sklearn.cluster import AgglomerativeClustering
h_clusters = AgglomerativeClustering(3)
h_clusters.fit(scaled_beer_df)
beer_df["h_clusterid"] = h_clusters.labels_

beer_df[beer_df.h_clusterid == 0]

beer_df[beer_df.h_clusterid == 1]

beer_df[beer_df.h_clusterid == 2]