# -*- coding: utf-8 -*-
"""Linear Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ACTWUgLQbU1NB5nXxKmHuCNrslJ9OHGN
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sn

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

np.set_printoptions(precision=4, linewidth=100)
mba_salary_df = pd.read_csv('MBA Salary.csv')
mba_salary_df.head(10)

mba_salary_df.info()

import statsmodels.api as sm
X = sm.add_constant(mba_salary_df['Percentage in Grade 10'])
X.head(5)

y = mba_salary_df['Salary']

from sklearn.model_selection import train_test_split
train_x, test_x, train_y, test_y = train_test_split(X,
                                                    y,
                                                    train_size = 0.8,
                                                    random_state = 100)

mba_salary_lm =sm.OLS( train_y, train_x  ).fit()

print(mba_salary_lm.params )

mba_salary_lm.summary2()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

"""*The Normality of residual can be checked using P-P Plot*"""

mba_salary_resid = mba_salary_lm.resid
probplot = sm.ProbPlot(mba_salary_resid)
plt.figure( )
probplot.ppplot(line ='45')
plt.title("FIG 4.1 - Normal P-P Plot of Regression Standardized residuals")
plt.show()

"""*Test of Homoscendasticity*"""

def get_standardized_value(vals):
  return (vals - vals.mean())/vals.std()

plt.scatter( get_standardized_value(mba_salary_lm.fittedvalues ),
            get_standardized_value(mba_salary_resid))
plt.title("Fig - Residual plot: MBA Salary Prediction");
plt.xlabel("Standardized predicted values" )
plt.ylabel("Standard Residuals ");

"""***Outlier Analysis***

*1) Z-Score* - The standard distance of an observation from its mean value.
"""

from scipy.stats import zscore

mba_salary_df['z_score_salary'] = zscore(mba_salary_df.Salary)
mba_salary_df[ (mba_salary_df.z_score_salary > 3.0 ) | (mba_salary_df.z_score_salary < -3.0) ]

"""*2)Cook's Distance* -The Measure of how much the predicted value of the dependent variable changes for all the observations in a sample when a particular observation is excluded from the sample for the estimation of regression paramater"""

import numpy as np
mba_influence = mba_salary_lm.get_influence()
(c, p) = mba_influence.cooks_distance

plt.stem(np.arange(len( train_x)),
         np.round(c, 3),
         markerfmt="," );

plt.title("Fig - Cooks distance for all observation in MBA Salary data set");
plt.xlabel("Row index")
plt.ylabel("Cooks Distance");

pred_y = mba_salary_lm.predict(test_x)

from sklearn.metrics import r2_score, mean_squared_error
np.abs(r2_score(test_y, pred_y))

np.sqrt(mean_squared_error(test_y, pred_y))